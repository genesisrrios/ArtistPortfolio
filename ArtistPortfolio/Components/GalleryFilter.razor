@inject ArtistService _service
<nav class="col-sm-2 d-none d-md-block bg-light sidebar">
    <div class="sidebar-sticky">
        <ul class="nav flex-column">
            <li class="nav-item">
                <input class="form-control mr-sm-2" type="text" placeholder="Search by description" @oninput="OnDescriptionChanged" aria-label="Search">
            </li>
            <li class="mb-1 nav-item">
                <button class="btn btn-toggle align-items-center rounded" data-bs-toggle="collapse" data-bs-target="#category-collapse" aria-expanded="true">
                    Categories
                </button>
                <div class="collapse show" id="category-collapse">
                    <ul class="btn-toggle-nav list-unstyled fw-normal pb-1 small">
                        @foreach(var cat in Categories)
                        {
                            <li>
                                <div class="form-check">
                                  <input class="form-check-input" type="checkbox" onclick="@(() => AddCategoryFilter(cat))" value="" id="@cat">
                                  <label class="form-check-label">
                                    @cat
                                  </label>
                                </div>
                            </li>
                        }
                    </ul>
                </div>
            </li>
        </ul>
    </div>
</nav>

@code {
    private List<string> Categories { get; set; } = new List<string>();
    private string Description { get; set; }

    [Parameter] public EventCallback<string> DescriptionChanged { get; set; }
    [Parameter] public EventCallback<List<string>> CategoryChanged { get; set; }
    private List<string> SelectedCategories { get; set; } = new List<string>();
    protected override void OnInitialized()
    {
        Categories = _service.GetCategories().ToList();
    }
    private async Task AddCategoryFilter(string cat)
    {
        var category = SelectedCategories.Where(x => x == cat).FirstOrDefault();
        if (String.IsNullOrEmpty(category))
            SelectedCategories.Add(cat);
        else
            SelectedCategories.Remove(category);

        await CategoryChanged.InvokeAsync(SelectedCategories);
    }
    private async Task OnDescriptionChanged(ChangeEventArgs e)
    {
        Description = e.Value.ToString();
        await DescriptionChanged.InvokeAsync(Description);
    }
}
